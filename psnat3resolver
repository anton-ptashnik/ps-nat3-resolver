#!/bin/bash

set -e

if [ "$EUID" -ne 0 ]; then
  echo "Please run as root. The script requires root for network setup"
  exit 1
fi

REAL_PATH=$(realpath "$0")
SCRIPT_NAME=$(basename "$REAL_PATH")
SCRIPT_DIR_PATH=$(dirname "$REAL_PATH")
CONF_DIR_PATH=$SCRIPT_DIR_PATH/config
BASE_CONF_PATH=$CONF_DIR_PATH/base.conf.sh
USER_CONF_PATH=$CONF_DIR_PATH/user.conf

source $BASE_CONF_PATH
source $USER_CONF_PATH
USER_SSH_KEY_PATH=$SSH_KEY_PATH
SSH_KEY_PATH=$SELECTED_SSH_KEY_PATH

ACTION=$1

log()
{
  echo "$1" | tee /dev/fd/3
}

usage()
{
  log \
  "
Usage: sudo $SCRIPT_NAME up|down

Note init is required before the first usage!

Commands:
  sudo $SCRIPT_NAME up - setup network
  sudo $SCRIPT_NAME down - cleanup network
  sudo $SCRIPT_NAME status - show network status and connection params
  sudo $SCRIPT_NAME init - prepare the script for work
  sudo $SCRIPT_NAME deinit - prepare for script removal
  "
  exit 1
}
do_droplet_create ()
{
  local DROPLET_NAME=$1
  local DROPLET_ID=$(curl -sS -X POST \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $DO_TOKEN" \
    -d "{\"name\":\"$DROPLET_NAME\",\"region\":\"nyc1\",\"size\":\"s-1vcpu-512mb-10gb\",\"image\":\"ubuntu-24-04-x64\",\"ssh_keys\":[\"$SSH_KEY_FINGERPRINT\"]}" \
    "https://api.digitalocean.com/v2/droplets" | jq .droplet.id)
  local SERVER_IP=$(timeout 50 sh -c '
    DO_TOKEN=$0
    DROPLET_ID=$1
    IPADDR=null
    until [ "$IPADDR" != "null" ]; do 
      sleep 5
      IPADDR=$(curl -sS -X GET \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $DO_TOKEN" \
        "https://api.digitalocean.com/v2/droplets/$DROPLET_ID" | jq ".droplet.networks.v4 | map(select(.type == \"public\")) | first | .ip_address")
    done
    echo $IPADDR
  ' "$DO_TOKEN" "$DROPLET_ID")
  SERVER_IP=$(echo "$SERVER_IP" | tr -d '"')
  echo "$DROPLET_ID $SERVER_IP"
}
do_droplet_remove ()
{
  local DROPLET_ID=$1
  curl -X DELETE \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $DO_TOKEN" \
    "https://api.digitalocean.com/v2/droplets/$DROPLET_ID"
}
do_sshkey_check_whitelisted ()
{
  local SSH_KEY_FINGERPRINT=$1
  local OUT=$(curl -sS -X GET \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $DO_TOKEN" \
    "https://api.digitalocean.com/v2/account/keys" \
    | jq ".ssh_keys | map(select(.fingerprint == \"$SSH_KEY_FINGERPRINT\")) | first")
  [ "$OUT" != "null" ]
}
do_sshkey_whitelist ()
{
  local SSH_PUBKEY_PATH=$1
  local SSH_PUBKEY=$(<$SSH_PUBKEY_PATH)
  curl -sS -X POST \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $DO_TOKEN" \
    -d "{\"name\":\"droplet-key\",\"public_key\":\"$SSH_PUBKEY\"}" \
    "https://api.digitalocean.com/v2/account/keys"
}
cfg_var_unset()
{
    local VAR_NAME=$1
    sed -i "/\b$VAR_NAME\b=/d" $BASE_CONF_PATH
}
cfg_var_set()
{
    local VAR_NAME=$1
    local VAR_VALUE=${!VAR_NAME}
    cfg_var_unset $VAR_NAME
    echo "export $VAR_NAME='$VAR_VALUE'" >> $BASE_CONF_PATH
}
check_up()
{
  [[ -n "$SERVER_IP" ]]
}
show_status()
{
  check_up || { log "Network is DOWN. Use the 'up' command to setup"; return; }

  OUT=$(ip route get 1.1.1.1)
  ADDRESS=$(echo $OUT | grep -oP "src \K\d+.\d+.\d+.\d+")
  INTERFACE=$(echo $OUT | grep -oP "dev \K\w+")
  NETMASK=$(ifdata -pn $INTERFACE)
  log \
  "
Network is UP. Set params on your console to connect:

  - IP address: $PS_IP
  - network mask: $NETMASK
  - gateway: $ADDRESS
  - DNS: primary 8.8.8.8, secondary 8.8.4.4
  - other leave as is
  "

  log "Diagnostic info..."
  nc -z -w 4 $SERVER_IP 22 && SERVER_STATUS=OK || SERVER_STATUS=FAIL
  ping -c 1 $PS_IP && PS_STATUS=OK || PS_STATUS=FAIL
  ping -c 1 $WG_LINK_SERVER_IP && WG_LINK_STATUS=OK || WG_LINK_STATUS=FAIL
  timeout 5s tcpdump -n -c 1 src host $PS_IP and icmp &
  PS_ICMP_LISTENER_PID=$!
  ping -c 1 $SERVER_IP && SERVER_PING_OK=0 || SERVER_PING_OK=1
  wait $PS_ICMP_LISTENER_PID && PS_ICMP_FWD_OK=0 || PS_ICMP_FWD_OK=1
  [[ $SERVER_PING_OK -eq 0 && $PS_ICMP_FWD_OK -eq 0 ]] && CONSOLE_FWD_STATUS=OK || CONSOLE_FWD_STATUS=FAIL

  log \
  "
  Server accessibility...........$SERVER_STATUS
  Console accessibility..........$PS_STATUS
  Virtual link...................$WG_LINK_STATUS
  Traffic forwarding.............$CONSOLE_FWD_STATUS
  "
}

exec 3>&1
exec >> $SCRIPT_DIR_PATH/debug.log 2>&1

echo -e "\ncall - $0 $@"

case $ACTION in
  up)
    check_up && { log "Already UP"; exit 0; }

    log "Reserving a server on Digital Ocean..."
    read SSH_KEY_FINGERPRINT <<< $(ssh-keygen -E md5 -lf "${SSH_KEY_PATH}.pub" | awk '{print $2}' | sed 's/^MD5://')
    read DROPLET_ID SERVER_IP <<< "$(do_droplet_create $DROPLET_NAME)"
    cfg_var_set SERVER_IP
    cfg_var_set DROPLET_ID

    log "Waiting for the server to become accessible..."
    export SERVER_IP
    export SSH_KEY_PATH
    timeout 50 sh -c '
      until ssh -i $SSH_KEY_PATH -o StrictHostKeyChecking=no root@$SERVER_IP "uptime"; do
        sleep 5
      done
    '

    log "Setting up a virtual link on the server..."
    timeout 180 sh -c '
      until ssh -i $SSH_KEY_PATH root@$SERVER_IP "apt-get install -y wireguard"; do
        ssh -i $SSH_KEY_PATH root@$SERVER_IP "DEBIAN_FRONTEND=noninteractive apt-get update" || true
        sleep 10
      done
    '
    scp -i $SSH_KEY_PATH $CONF_DIR_PATH/wg0-server.conf root@$SERVER_IP:/etc/wireguard/wg0.conf

    log "Setting up a virtual link on the client (this machine)..."
    envsubst < $CONF_DIR_PATH/wg0-client.conf > /etc/wireguard/wg0.conf

    log "Activating a virtual link..."
    ssh -i $SSH_KEY_PATH root@$SERVER_IP "wg-quick up wg0"
    wg-quick up wg0
    ;;

  down)
    check_up || { log "Already DOWN"; exit 0; }
    
    log "Deactivating a virtual link..."
    wg-quick down wg0

    log "Releasing the reserved server..."
    do_droplet_remove "$DROPLET_ID"

    cfg_var_unset DROPLET_ID
    cfg_var_unset SERVER_IP
    ;;

  status)
    show_status
    ;;

  init)
    check_up && { log "Network is UP. Make it DOWN before init"; exit 1; }

    [[ -n "$DO_TOKEN" ]] || { log "DO_TOKEN is not set. Please set and rerun"; exit 1; }
    [[ -n "$PS_IP" ]] || { log "PS_IP is not set. Please set and rerun"; exit 1; }

    if [[ -n "$USER_SSH_KEY_PATH" ]]; then
        [[ -f "$USER_SSH_KEY_PATH"  ]] || { log "SSH key not found at $USER_SSH_KEY_PATH. Please fix SSH_KEY_PATH and rerun"; exit 1; }
        SELECTED_SSH_KEY_PATH=$USER_SSH_KEY_PATH
    else
      log "SSH_KEY_PATH is not set. Using a default SSH key"
      if [[ ! -f "$DEFAULT_SSH_KEY_PATH" ]]; then
        log "Default SSH key is missing. Creating a key..."
        ssh-keygen -t ed25519 -N "" -f $DEFAULT_SSH_KEY_PATH -C "digital-ocean"
      fi
      SELECTED_SSH_KEY_PATH=$DEFAULT_SSH_KEY_PATH
    fi
    cfg_var_set SELECTED_SSH_KEY_PATH
    SSH_KEY_PATH=$SELECTED_SSH_KEY_PATH

    SSH_PUBKEY_PATH="${SSH_KEY_PATH}.pub"

    log "Checking if the SSH key is whitelisted on Digital Ocean..."
    read SSH_KEY_FINGERPRINT <<< $(ssh-keygen -E md5 -lf "${SSH_KEY_PATH}.pub" | awk '{print $2}' | sed 's/^MD5://')
    if ! do_sshkey_check_whitelisted "$SSH_KEY_FINGERPRINT"; then
       log "New SSH key. Whitelisting the key on Digital Ocean..."
       do_sshkey_whitelist "$SSH_PUBKEY_PATH"
    fi

    log "Installing dependencies..."
    apt install -y wireguard jq moreutils tcpdump

    log "Installing a command shortcut (symlink)..."
    rm -f /usr/local/bin/$SCRIPT_NAME
    ln -s $SCRIPT_DIR_PATH/$SCRIPT_NAME /usr/local/bin/$SCRIPT_NAME

    log "Checking WG keys presence"
    if [[ ! -n "$WG_SERVER_PUBKEY" ]]; then
      log "WG keys missing. Generating new keys..."
      export WG_SERVER_PRIVKEY=$(wg genkey)
      export WG_SERVER_PUBKEY=$(echo $WG_SERVER_PRIVKEY | wg pubkey)
      export WG_CLIENT_PRIVKEY=$(wg genkey)
      export WG_CLIENT_PUBKEY=$(echo $WG_CLIENT_PRIVKEY | wg pubkey)
      cfg_var_set WG_SERVER_PRIVKEY
      cfg_var_set WG_SERVER_PUBKEY
      cfg_var_set WG_CLIENT_PRIVKEY
      cfg_var_set WG_CLIENT_PUBKEY
    fi

    log "Rendering config templates"
    export PS_IP
    export SERVER_IP='$SERVER_IP'
    envsubst < $CONF_DIR_PATH/wg0-client-template.conf > $CONF_DIR_PATH/wg0-client.conf
    envsubst < $CONF_DIR_PATH/wg0-server-template.conf > $CONF_DIR_PATH/wg0-server.conf
    ;;

  deinit)
    check_up && { log "Network is UP. Make it DOWN before deinit"; exit 1; }
    
    log "Removing a command shortcut (symlink)..."
    rm -f /usr/local/bin/$SCRIPT_NAME
    cfg_var_unset SELECTED_SSH_KEY_PATH
    log "Done! Now you can remove a folder $SCRIPT_DIR_PATH to complete removal."
    ;;

  *)
    usage
    ;;
esac
